<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace对应接口全类名 -->
<mapper namespace="usts.pycro.mybatis.mapper.DynamicSQLMapper">

    <!--
     动态SQL：
     1.if：通过test属性中的表达式判断标签中的内容是否有效（是否会拼接到sql中）
     2.where：
        a.若where标签中有条件成立，会自动生成where关键字
        b.会自动将where标签中内容前多余的and去掉，但是其中内容后多余的and无法去掉
        c.若where标签中没有任何一个条件成立，则where标签没有任何功能（不会生成where关键字）
    3.trim
        prefix、suffix：在标签中内容的前面或后面添加指定内容（仅添加一次）
        prefixOverrides、suffixOverrides：在标签中内容的前面或后面去掉指定内容（仅去除一次）
    4.choose、when、otherwise
        相当于java中的if...else if...else或者switch...case...default
        when至少设置一个，otherwise之多设置一个
    5.foreach
        collection：设置需要循环的数组或集合
        item：用一个字符串表示数组或集合中的每一条数据
        separator：设置每次循环的数据之间的分隔符
        open：循环的内容以什么开始
        close：循环的内容以什么结束
    6.sql片段
        记录一段sql片段，在sql语句需要用到的地方进行引入即可
        声明：
        <sql id="empColumns">
            emp_id,emp_name,age,gender,dept_id
        </sql>
        使用：
         <include refid="empColumns"/>
     -->

    <sql id="empColumns">
        emp_id,emp_name,age,gender,dept_id
    </sql>
    <!--  List<Emp> getEmpByCondition(Emp emp); -->
    <select id="getEmpByCondition" resultType="emp">
        select
        <include refid="empColumns"/>
        from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName != ''">
                emp_name = #{empName} and
            </if>
            <if test="age != null and age != ''">
                age = #{age} and
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender} and
            </if>
        </trim>
    </select>

    <select id="getEmpByConditionTwo" resultType="emp">
        select *
        from t_emp
        <where>
            <if test="empName != null and empName != ''">
                emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender != null and gender != ''">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <select id="getEmpByConditionOne" resultType="emp">
        select *
        from t_emp
        where
        0=0
        <if test="empName != null and empName != ''">
            and emp_name = #{empName}
        </if>
        <if test="age != null and age != ''">
            and age = #{age}
        </if>
        <if test="gender != null and gender != ''">
            and gender = #{gender}
        </if>
    </select>

    <!-- List<Emp> getEmpByChoose(Emp emp); -->
    <select id="getEmpByChoose" resultType="emp">
        select * from t_emp
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="gender != null and gender != ''">
                    gender = #{gender}
                </when>
                <!--
                otherwise中没有内容可以省略
                <otherwise></otherwise>
                -->

            </choose>
        </where>
    </select>

    <!--  void insertMoreEmp(@Param("emps") List<Emp> emps); -->
    <select id="insertMoreEmp">
        insert into t_emp
        values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </select>

    <!--  void deleteMoreEmp(@Param("empIds") Integer[] empIds); -->
    <delete id="deleteMoreEmp">
        <!-- delete from t_emp -->
        <!-- where emp_id in -->
        <!-- <foreach collection="empIds" item="empId" separator="," open="(" close=")"> -->
        <!--     #{empId} -->
        <!-- </foreach> -->
        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>
</mapper>